@page "/personas"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Indice Personas</h3>

<div class="container">
    <div class="form-group">
	    <a class="btn btn-info" href="personas/crear">Crear personas</a>
    </div>
    <div class="form-group">
	    <input type="button" class="btn btn-info" @onclick="mostrarListado" value="Listar Personas">
    </div>
</div>

@if(mostarLista)
{

<FiltroPersonas Persona="Personas" PersonaCompleta="PersonaCompleta" 
			  CargaNuevaPersona="CargaNuevaPersona" CargaNuevaPersonaCompleta="LimpiarOnClick"></FiltroPersonas>
 <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></Paginacion>
 <ListadoGenerico Listado="Personas">
	<HayRegistrosCompleto>
		<table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Personas)
                {
                    <tr>
                        <td>
                            <AuthorizeView Roles="admin"> @*Con AuthorizeView podemos dar autorización para mostrar contenido o realizar cambios*@
	                            <Authorized>
		                            <a href="/personas/editar/@item.Id" class="btn btn-success">Editar</a>
                                    <button @onclick="@(()=>BorrarPersona(item))" class="btn btn-danger">Borrar</button>
	                            </Authorized>
                            </AuthorizeView>
                        </td>
                        <td>@item.Nombre</td>
                    </tr>
                }
            </tbody>
        </table>
	</HayRegistrosCompleto>
</ListadoGenerico> 
}


@code {

    bool mostarLista = false;
    private int paginaActual = 1; //paginación
    private int paginasTotales; //paginación
    public List<Persona> Personas { get; set; } = new List<Persona>();
    public List<Persona>PersonaCompleta { get; set; } = new List<Persona>();

    protected async override Task OnInitializedAsync() 
    {
        await Cargar();
    }
    public void mostrarListado()
    {
        mostarLista = !mostarLista;
    }

    //filtro
    private void CargaNuevaPersona(string nombre)
    {
        Personas = Personas.Where(x => x.Nombre.ToLower().Contains(nombre.ToLower())).ToList();
    }
    private void LimpiarOnClick()
    {
        Personas = PersonaCompleta;
    }
    //fin filtro

    //paginación
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1) // con este método vamos a tener el listado de personas en la propiedad Personas
    {
        var responseHttp = await repositorio.Get<List<Persona>>($"api/personas?pagina={pagina}"); // con esto se obtiene el listado de personas de la base de datos
        if (!responseHttp.Error)
        {
            Personas = responseHttp.Response;
            PersonaCompleta = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }
    //fin paginación

    //borrar persona
    private async Task BorrarPersona(Persona persona)
    {
        var responseHTTP = await repositorio.Delete($"api/personas/{persona.Id}");
        if(responseHTTP.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHTTP.GetBody());
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Se eliminó correctamente");
            await Cargar();
        }
    }
    //fin borrar comida
}
