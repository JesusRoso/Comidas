@page "/"
@inject ServiciosSingleton singleton
@inject IRepositorio repositorio
@inject IJSRuntime js
@inject IMostrarMensajes mostrarMensajes

<PageTitle>Index</PageTitle>

@if (permisoNotificaciones == "granted")
{
    <button @onclick="Desuscribir" class="btn btn-warning">Desactivar Notificación Nuevas Películas</button>
}
else if (permisoNotificaciones == "default")
{
    <button @onclick="Suscribir" class="btn btn-primary">Activar Notificación Nuevas Películas</button>
}

<p role="status">Singleton count: @singleton.Valor</p>
<div class="container">
	<div>
		<a class="btn btn-info container__elements" href="alimentos">Comidas</a>
	</div>
	<div>
		<a class="btn btn-info container__elements" href="personas">Personas</a>
	</div>
</div>



@code
{

	private string permisoNotificaciones = string.Empty;
	private List<ComidasRapidas> ComidasRapidas;
	protected async override Task OnInitializedAsync()
	{
		//ComidasRapidas = repositorio.ObtenerComidas();
		permisoNotificaciones = await js.ObtenerEstatusPermisoNotificaciones();
	}

	private async Task Suscribir()
    {
        var notificacion = await js.SuscribirANotificaciones();

        if (notificacion != null)
        {
            await repositorio.Post("api/notificaciones/suscribir", notificacion);
            permisoNotificaciones = await js.ObtenerEstatusPermisoNotificaciones();
            await mostrarMensajes.MostrarMensajeExitoso("Vas a recibir una notificación cuando agrege comida");
            StateHasChanged();
        }
    }

    private async Task Desuscribir()
    {
        var notificacion = await js.DesuscribirANotificaciones();

        if (notificacion != null)
        {
            await repositorio.Post("api/notificaciones/desuscribir", notificacion);
            permisoNotificaciones = await js.ObtenerEstatusPermisoNotificaciones();
            await mostrarMensajes.MostrarMensajeExitoso("Ya no vas a recibir notificaciones");
            StateHasChanged();
        }
    }
}