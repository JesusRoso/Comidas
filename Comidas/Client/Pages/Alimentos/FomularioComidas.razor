@inject IRepositorio repositorio

<EditForm Model="ComidaRapida" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<div class="form-group" style="margin-bottom:15px">
		<label>Nombre:</label>
		<div>
			<InputText class="form-control" @bind-Value="@ComidaRapida.titulo"></InputText>
			<ValidationMessage For="@(()=>ComidaRapida.titulo)"></ValidationMessage>
		</div>
		<label>Precio:</label>
		<div>
			<InputNumber class="form-control" @bind-Value="@ComidaRapida.precio"></InputNumber>
			<ValidationMessage For="@(()=>ComidaRapida.precio)"></ValidationMessage>
		</div>
	</div>
    <button class="btn btn-success" type="submit">Guardar</button>

	<div class="form-group">
            <label>Personas:</label>
            <div>
                <SelectorMultipleTypeahead Context="comida"
                                           SearchMethod="BuscarAlimentos" 
                                           ElementosSeleccionados="ComidasSeleccionadas">
                    <MyListTemplate>
                        @comida.titulo
                    </MyListTemplate>
                    <MyResultTemplate>
                        @comida.titulo
                    </MyResultTemplate>
                </SelectorMultipleTypeahead>
            </div>
        </div>
</EditForm>

@code 
{
    [Parameter] public ComidasRapidas ComidaRapida { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<ComidasRapidas> ComidasSeleccionadas { get; set; } = new List<ComidasRapidas>();

    private async Task<IEnumerable<ComidasRapidas>> BuscarAlimentos(string searchText)
    {
        var responseHTTP = await repositorio.Get<List<ComidasRapidas>>($"api/ComidasRapidas/buscar/{searchText}");
        return responseHTTP.Response;
    }
}
